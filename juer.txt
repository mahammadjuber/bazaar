import React,{Component} from 'react';
import {Alert,TextInput,View,Text,AsyncStorage,ScrollView,StyleSheet,Dimensions,Image} from 'react-native';
import HeaderComponent from './Header.js';
import APP_CONSTANTS from './AppConstants.js';
import {Dropdown} from 'react-native-material-dropdown';
import {Button,Icon,Divider} from 'react-native-elements';


class Cart extends Component{

  /* TO HIDE DEFAULT HEADER */
  static navigationOptions={
    header:null,
  }
/* //TO HIDE DEFAULT HEADER */

constructor(){
 super()
this.state={
    categories:[],
    BillTotal:0,
    SampleData:'React Bazaar',
    BazaarCart:[{ProductId:22},{ProductId:23}],
    CartItems:<View><Text></Text></View>,
    
},
this.CartRefs=[];
}

 SampleFunction=()=>{
 
    console.log('This was Nextpage Technologies Pvt Ltd.');
     Alert.alert('This was Nextpage Technologies Pvt Ltd.');


 }
 RemoveItemFromCart=(ProductId)=>{

   Elem=this.CartRefs[ProductId];
   Elem.setNativeProps({style:{display:'none'}});
   Alert.alert('SSAHFKASJH');

 }


 UpdateCart=(ProductId,Action)=>{
   
   var BazaarCart=this.state.BazaarCart;
   
   var CurrentItem=[];
   for(i=0;i<BazaarCart.length;i++){
     
     
    if(BazaarCart[i]['ProdDetails'].product_id==ProductId){
      
      CurrentItem=BazaarCart[i];
    }
   }
   
   Quantity=CurrentItem['Quantity'];
   if(Action=='ADD'){
    Quantity=Quantity+1;
    
   }else if(Action=='REMOVE'){
    Quantity=Quantity-1;
   }
   CurrentItem['Quantity']=Quantity;
   
   BazaarCart[ProductId]=CurrentItem;

   
   this.CartRefs['product_quantity_'+ProductId].setNativeProps({value:Quantity.toString()});
   this.setState({'BazaarCart':BazaarCart});
   
 }
 

render(){
   debugger;
   
   let {width,height}=Dimensions.get('window');
   var styles=StyleSheet.create({
     container:{
       backgroundColor:'#f1f3f6',
       height:height,      
     },
     textRight:{
       textAlign:'right',
     },
     divider:{
       backgroundColor:'#ccc',
       marginTop:15,
       marginBottom:7,
     },
     ProductContainer:{
      minHeight:160,
      padding:10,
      paddingTop:20,
      paddingBottom:20,
      backgroundColor:'#fff',
      position:'relative',
      borderWidth: 1,
      borderRadius: 3,
      borderColor: '#fff',
      borderBottomWidth: 0,
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 2 },
      shadowOpacity: 0.8,
      shadowRadius: 2,
      elevation: 1,
      marginTop: 10,
     },
     productRight:{
       width:'55%',
       paddingLeft:15,
     },
     productLeft:{
     width:'40%',
     },
     productTitle:{
       fontSize:14,
     },
     cartItemss:{
        backgroundColor:'#f1f3f6',
        height:height,  
     },
     eachCartItem:{
        display:'none',
        minHeight:180,
        paddingTop:20,
        paddingBottom:20,
        backgroundColor:'#fff',
        position:'relative',
        borderWidth: 1,
        borderRadius: 3,
        borderColor: '#fff',
        borderBottomWidth: 0,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.8,
        shadowRadius: 2,
        elevation: 1,
        marginLeft: 5,
        marginRight: 5,
        marginTop: 10,
     },
     eCIFooter:{
         position:'absolute',
         bottom:0,
         height:30,
         borderColor:'#ccc',
         borderTopWidth:1,
         width:'100%'
     },
     priceDetails:{
       backgroundColor:'#fff',
       minHeight:100,
       marginTop:20,
       padding:10,
       minHeight:160,
       padding:10,
       paddingTop:20,
       paddingBottom:20,
       backgroundColor:'#fff',
       position:'relative',
       borderWidth: 1,
       borderRadius: 3,
       borderColor: '#fff',
       borderBottomWidth: 0,
       shadowColor: '#000',
       shadowOffset: { width: 0, height: 2 },
       shadowOpacity: 0.8,
       shadowRadius: 2,
       elevation: 1,
       marginTop: 10,
     },
     cartFooter:{
      backgroundColor:'#fff',
      marginTop:20,
      height:70,
      width:'100%',
      bottom:0,
      justifyContent: 'center',
      alignItems: 'center',
      padding:10,
     },
     Row:{
     flexDirection:'row',
     },
     splitCols:{
       flex:1,
     },
     buttonView:{
       height:45,
       backgroundColor:APP_CONSTANTS.APP_BTN_CLR,
       width:150,
       marginLeft:20,
       borderColor:"#fff",
       borderWidth:1,
       borderRadius:3,
       justifyContent: 'center',
       alignItems: 'center',
     },
     buttonText:{
       color:'white',
       fontSize:15
     },
     totalPrice:{
       fontWeight:'bold',
       fontSize:18,
     }
     
   });
    AsyncStorage.getItem("BazaarCart").then((value) => {
        
        let Cart=[];
        
        
        
        CartObject=JSON.parse(value);
        
        for(var key in CartObject){
            let Item=CartObject[key];
            Cart.push(Item);
            
            }
            
        this.setState({"BazaarCart":Cart});
       
          var BillTotal=0;
        for(j=0;j<this.state.BazaarCart.length;j++){
          let EachP=this.state.BazaarCart[j];
          BillTotal=parseFloat(BillTotal)+parseFloat(parseFloat(EachP['Price'])*parseFloat(EachP['Quantity']));
        } 
        let CartItems='';
        
        CartItems= this.state.BazaarCart.map(EachP => {
         
            <View key={EachP['ProdDetails'].product_id}  ref={(ref) => { this.CartRefs['product_1'] = ref; }}  style={styles.ProductContainer}>
            <View style={{flexDirection:'row'}}>
              <View style={styles.productLeft}>
              <Image 
                style={{height: 120,width:140}} 
                source={{uri: APP_CONSTANTS.APP_BASE_URL+EachP['ProdDetails'].front_image}}
              />
              </View>
              <View style={styles.productRight}>
              <Text style={styles.productTitle}>{EachP['ProdDetails'].title}</Text>
              <View style={{height:40,marginTop:10,marginBottom:10}}>
               <Text>{EachP['VarientName']}</Text>
               </View>
             <View style={{width:240,flexDirection:'row'}}>
                <View style={{width:80,height:40,borderColor:'#ccc',borderRadius:3,borderWidth:1,flexDirection:'row'}}>
                <Icon containerStyle={{flex:1,paddingLeft:7}} 
        name='remove'
        type='material'
        color='#517fa4'
        size={18}
        onPress={()=>this.UpdateCart(EachP['ProdDetails'].product_id,'REMOVE')}
      />
      <TextInput 

      underlineColorAndroid='#fff'
      defaultValue={EachP['Quantity'].toString()} 
      style={{textAlign:'center',paddingLeft:5,paddingRight:5,flex:1}} 
      keyboardType='numeric' maxLength={3}
      ref={(ref) => { this.CartRefs['product_quantity_'+EachP['ProdDetails'].product_id] = ref; }} 
      />
   
    <Icon containerStyle={{flex:1,paddingLeft:7}} 
        name='add'
        type='material'
        color='#517fa4'
        size={18}
        onPress={()=>this.UpdateCart(EachP['ProdDetails'].product_id,'ADD')}
      />
    
    
                </View>   
      
                   <Button title='Remove' style={{width:80}}
              color="#999"
              buttonStyle={{
                backgroundColor: "#fff",
                height: 40,
                borderColor: "#999",
                borderWidth: 0,
                borderRadius: 3,
                marginTop:0
              }}
              icon={{ type: 'material',name:'delete',size:15,
              color:"#999"}}
              onPress={()=>this.RemoveItemFromCart('product_1')}
              raised
              containerViewStyle={{marginTop:0,height:40,borderRadius: 3,width:95,borderWidth:1,borderColor:'#fff' }}
              />
      
              </View>
      
      
              </View>
        
            </View>
            </View>
           
    });
         this.setState({BillTotal:BillTotal});
         /*  CartItems= Cart.map(EachP => (
           <Text key={EachP['ProdDetails'].product_id}>{EachP['ProdDetails'].title}</Text>
          )); */
          this.setState({CartItems:CartItems})
      console.log(CartItems);
    }).done();
    
    
  

return(
  
  <View style={{flex:1,backgroundColor:'white'}}>
    <HeaderComponent />

<Text style={{fontSize:20,textAlign:'center',paddingTop:10,paddingBottom:10}}>Cart</Text>

<ScrollView style={{backgroundColor:'#f1f3f6'}}>


{this.state.CartItems}



{/* PRICE DETAILS */}
<View style={styles.priceDetails}>

<Text style={{color:"#666",fontSize:12}}>PRICE DETAILS</Text>
<Divider style={styles.divider} />

<View style={styles.Row}>
<View style={styles.splitCols}>
<Text>Col 1</Text>
</View>
<View style={styles.splitCols}>
<Text style={styles.textRight}>Col 2</Text>
</View>
</View>
</View>
{/* PRICE DETAILS */}









</ScrollView>

{/* CART FOOTER  */}
<View style={[styles.cartFooter,styles.Row]}>
<Text style={[styles.splitCols,styles.totalPrice]}>Rs.{this.state.BillTotal}</Text>
<View style={styles.splitCols}>
<View style={styles.buttonView}><Text style={[styles.buttonText]}>{'Continue'.toUpperCase()}</Text></View>
</View>

</View>
{/* CART FOOTER  */}

</View>

)


}



}//end of class


export default Cart;